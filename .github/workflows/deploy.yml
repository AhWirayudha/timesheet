name: Deploy to Production

on:
  push:
    tags:
      - 'v*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run all checks
      run: pnpm run ci
      
    - name: Build application
      run: pnpm run build
      
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload build artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./.next
        asset_name: build-files
        asset_content_type: application/zip
        
    - name: Deploy to Vercel
      if: env.VERCEL_TOKEN != ''
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        # Your original environment variables
        POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
        BASE_URL: ${{ secrets.BASE_URL }}
        AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        # Other environment variables
        NODE_ENV: production
      run: |
        echo "Deploying to production..."
        echo "Setting up Vercel configuration..."
        
        # Create vercel.json if it doesn't exist
        if [ ! -f "vercel.json" ]; then
          cat > vercel.json << EOF
        {
          "version": 2,
          "builds": [
            {
              "src": "package.json",
              "use": "@vercel/next"
            }
          ],
          "env": {
            "POSTGRES_URL": "@postgres_url",
            "BASE_URL": "@base_url",
            "AUTH_SECRET": "@auth_secret",
            "GEMINI_API_KEY": "@gemini_api_key"
          }
        }
        EOF
        fi
        
        # Deploy to Vercel
        npx vercel --prod --token $VERCEL_TOKEN --confirm
        
    - name: Notify deployment success
      run: |
        echo "ðŸš€ Successfully deployed version ${{ github.ref }} to production!"
        echo "Release URL: ${{ steps.create_release.outputs.html_url }}"
        echo "Vercel deployment completed successfully!" 